buildscript {
	ext.kotlin_version = '1.4.30'
	repositories {
		maven { url = 'https://files.minecraftforge.net/maven' }
		maven { url = 'https://plugins.gradle.org/m2/' }
		jcenter()
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
		classpath "org.jetbrains.dokka:dokka-gradle-plugin:$kotlin_version"
	}
}

plugins {
	id 'com.github.johnrengelman.shadow' version '4.0.4'
	id "org.jetbrains.dokka" version "$kotlin_version"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'kotlin'

group = 'ca.landonjw'
version = '1.0-SNAPSHOT'
archivesBaseName = 'kotlinmon'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
	// The mappings can be changed at any time, and must be in the following format.
	// snapshot_YYYYMMDD   Snapshot are built nightly.
	// stable_#            Stables are built at the discretion of the MCP team.
	// Use non-default mappings at your own risk. they may not always work.
	// Simply re-run your setup task after changing the mappings to update your workspace.
	mappings channel: 'snapshot', version: '20210309-1.16.5'
	// makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

	// accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	// Default run configurations.
	// These can be tweaked, removed, or duplicated as needed.
	runs {
		client {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'

			mods {
				kotlinmon {
					source sourceSets.main
				}
			}
		}

		server {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'

			mods {
				kotlinmon {
					source sourceSets.main
				}
			}
		}

		data {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'

			// Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
			args '--mod', 'kotlinmon', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

			mods {
				kotlinmon {
					source sourceSets.main
				}
			}
		}
	}
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
	// Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
	// that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
	// The userdev artifact is a special name and will get all sorts of transformations applied to it.
	minecraft 'net.minecraftforge:forge:1.16.5-36.1.4'

	// You may put jars on which you depend on in ./libs or you may define them like so..
	// compile "some.group:artifact:version:classifier"
	// compile "some.group:artifact:version"

	// Real examples
	// compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
	// compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

	// The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
	// provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

	// These dependencies get remapped to your current MCP mappings
	// deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

	// For more info...
	// http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
	// http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
	manifest {
		attributes([
				"Specification-Title"     : "kotlinmon",
				"Specification-Vendor"    : "landonjw",
				"Specification-Version"   : "1", // We are version 1 of ourselves
				"Implementation-Title"    : project.name,
				"Implementation-Version"  : project.version,
				"Implementation-Vendor"   : "landonjw",
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

jar.finalizedBy('reobfJar')

repositories {
	mavenCentral()
	maven {
		url 'http://oss.sonatype.org/content/repositories/snapshots'
	}
	maven {
		url "http://dvs1.progwml6.com/files/maven"
	}
	maven {
		name = 'Kotlin Early Access'
		url = 'https://dl.bintray.com/kotlin/kotlin-eap'
	}
	maven { url 'https://jitpack.io' }
	maven {
		url = 'https://maven.pkg.jetbrains.space/public/p/kotlinx-html/maven'
		content {
			includeGroup 'org.jetbrains.kotlinx'
		}
	}
}

dependencies {
	compile group: "org.jetbrains.kotlin", name: "kotlin-stdlib", version: kotlin_version
	compile group: "org.jetbrains.kotlin", name: "kotlin-stdlib-jdk7", version: kotlin_version
	compile group: "org.jetbrains.kotlin", name: "kotlin-stdlib-jdk8", version: kotlin_version
	compile group: "org.jetbrains.kotlin", name: "kotlin-reflect", version: kotlin_version
	compile group: "org.jetbrains", name: "annotations", version: annotations_version
	compile group: "org.jetbrains.kotlinx", name: "kotlinx-coroutines-core", version: coroutines_version
	compile group: "org.jetbrains.kotlinx", name: "kotlinx-coroutines-jdk8", version: coroutines_version
	compile 'org.kodein.di:kodein-di-generic-jvm:6.4.1'
}

shadowJar {
	classifier = null
	dependencies {
		include dependency("org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}")
		include dependency("org.jetbrains.kotlin:kotlin-stdlib-jdk7:${kotlin_version}")
		include dependency("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}")
		include dependency("org.jetbrains.kotlin:kotlin-reflect:${kotlin_version}")
		include dependency("org.jetbrains:annotations:${annotations_version}")
		include dependency("org.jetbrains.kotlinx:kotlinx-coroutines-core:${coroutines_version}")
		include dependency("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:${coroutines_version}")
		include dependency("org.kodein.di:kodein-di-generic-jvm:6.4.1")
	}
	relocate 'org', 'ca.landonjw.kotlinmon.common.util.shadow.org'
	relocate 'kotlin', 'ca.landonjw.kotlinmon.common.util.shadow.kotlin'
	relocate 'kotlinx', 'ca.landonjw.kotlinmon.common.util.shadow.kotlinx'
}

// Testing ---------------
test {
	useJUnitPlatform()
}

dependencies {
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
	testImplementation 'org.mockito:mockito-core:3.3.3'
	testImplementation 'io.mockk:mockk:1.9.3'
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}
// -----------------------

kotlinSourcesJar {
	from(sourceSets.main.kotlin.srcDirs)
}

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'
compileKotlin {
	kotlinOptions {
		jvmTarget = "1.8"
	}
}

tasks.withType(JavaCompile) { task ->
	task.options.encoding = 'UTF-8'
	task.options.fork = true
}

tasks.build.dependsOn kotlinSourcesJar
tasks.build.dependsOn shadowJar

compileJava {
	options.compilerArgs += ["-parameters"]
	options.fork = true
	options.forkOptions.executable = 'javac'
}